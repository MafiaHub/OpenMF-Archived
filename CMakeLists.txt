CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)
PROJECT(OpenMF)
MESSAGE(STATUS "Configuring OpenMF...")

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

SET(OpenMF_CMAKE_DIR "${OpenMF_SOURCE_DIR}/cmake")

STRING(COMPARE NOTEQUAL ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} CMAKE_OUT_OF_SOURCE_BUILD)

IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic")
ENDIF()

IF(CMAKE_OUT_OF_SOURCE_BUILD)
	SET(DEFAULT_RELATIVE_PATHS OFF)
ELSE()
	SET(DEFAULT_RELATIVE_PATHS ON)
ENDIF()

OPTION(CMAKE_USE_RELATIVE_PATHS "If true, cmake will use relative paths in makefiles and projects." ${DEFAULT_RELATIVE_PATHS})

IF (WIN32)
	SET(OSG_DIR CACHE PATH "Path where to find the OpenSceneGraph")
	IF(NOT OSG_DIR)
		MESSAGE(FATAL_ERROR "Error: OpenSceneGraph not found.")
	ELSE(NOT OSG_DIR)
		SET(OSG_DIR "${OSG_DIR};${OSG_DIR}/build")
	ENDIF(NOT OSG_DIR)

	SET(OSG_THIRD_PARTY_DIR CACHE PATH "Path where to find the osg third party dependencies")
	#IF(NOT OSG_THIRD_PARTY_DIR)
	#	MESSAGE(FATAL_ERROR "Error: OpenSceneGraph 3rd Party Directory not found.")
	#ENDIF(NOT OSG_THIRD_PARTY_DIR)
    
    SET(BULLET_ROOT CACHE PATH "Path where to find Bullet3")
    IF(NOT BULLET_ROOT)
        MESSAGE(FATAL_ERROR "Error: Bullet3 not found.")
    ELSE(NOT BULLET_ROOT)
        SET(BULLET_ROOT "${BULLET_ROOT}")
        SET(BULLET_INCLUDE_DIR "${BULLET_ROOT}/../src;")
    ENDIF(NOT BULLET_ROOT)
    
    SET(SDL2_ROOT CACHE PATH "Path where to find SDL2")
    IF(NOT SDL2_ROOT)
        MESSAGE(FATAL_ERROR "Error: SDL2 not found.")
    ELSE(NOT SDL2_ROOT)
        SET(SDL2_ROOT "${SDL2_ROOT}")
    ENDIF(NOT SDL2_ROOT)

ENDIF(WIN32)

IF(CMAKE_CONFIGURATION_TYPES)
   SET(CMAKE_CONFIGURATION_TYPES Debug Release)
   set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
     "Reset the configurations to what we need"
     FORCE)
ENDIF()

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

IF(WIN32)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D \"WIN32_LEAN_AND_MEAN\"")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D \"NOMINMAX\"")
	
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LTCG")
	
    IF(MSVC80)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Wp64")
    ENDIF(MSVC80)
	
	OPTION(MULTI_PROCESSOR_COMPILATION "Use multiple processors when compiling" ON)
	IF(MULTI_PROCESSOR_COMPILATION)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	ENDIF(MULTI_PROCESSOR_COMPILATION)

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
	IF (WARNINGS_AS_ERRORS)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
	ENDIF (WARNINGS_AS_ERRORS)
ENDIF(WIN32)

FIND_PACKAGE(OpenSceneGraph 3.4.1 REQUIRED osgDB osgViewer osgText osgGA osgParticle osgUtil osgFX)
FIND_PACKAGE(Bullet 2.88 REQUIRED BulletCommon BulletDynamics BulletCollision LinearMath)
FIND_PACKAGE(SDL2 REQUIRED SDL2 SDL2main)
FIND_PACKAGE(Threads)


INCLUDE_DIRECTORIES(${OPENSCENEGRAPH_INCLUDE_DIRS} ${BULLET_INCLUDE_DIRS} "/usr/include/bullet")

SET(USED_OSG_PLUGINS
    osgdb_bmp
    osgdb_dds
    osgdb_jpeg
    osgdb_osg
    osgdb_png
    osgdb_serializers_osg
    osgdb_tga)

INCLUDE_DIRECTORIES(components)
INCLUDE_DIRECTORIES(extern)
ADD_SUBDIRECTORY(apps)
